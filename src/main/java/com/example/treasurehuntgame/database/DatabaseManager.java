
package com.example.treasurehuntgame.database;

import java.sql.*;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

public class DatabaseManager {
    private static final String DB_URL = "jdbc:oracle:thin:@localhost:1521:XE";
    private static final String DB_USER = "TREASUREHUNT";
    private static final String DB_PASSWORD = "123";

    public void initializeTables() {
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {

            try (Statement stmt = conn.createStatement()) {
                try {
                    String createUsersTable = """
                    CREATE TABLE users (
                        id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                        username VARCHAR2(50) UNIQUE NOT NULL,
                        password VARCHAR2(100) NOT NULL,
                        created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """;

                    String createHistoryTable = """
                    CREATE TABLE game_history (
                        id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                        username VARCHAR2(50) NOT NULL,
                        difficulty VARCHAR2(10) NOT NULL,
                        result VARCHAR2(10) NOT NULL,
                        time_spent NUMBER NOT NULL,
                        play_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (username) REFERENCES users(username)
                    )
                """;

                    stmt.execute(createUsersTable);
                    stmt.execute(createHistoryTable);
                    System.out.println("Tables created successfully with IDENTITY columns");

                } catch (SQLException e) {
                    // If IDENTITY syntax fails, try traditional sequence approach
                    if (e.getErrorCode() == 2000 || e.getMessage().contains("missing ALWAYS keyword")) {
                        System.out.println("IDENTITY columns not supported, using sequences...");
                        createTablesWithSequences(stmt);
                    } else if (e.getMessage().contains("name is already used") ||
                            e.getMessage().contains("already exists")) {
                        System.out.println("Tables already exist");
                    } else {
                        throw e;
                    }
                }
            }
        } catch (SQLException e) {
            System.err.println("Database initialization error: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void createTablesWithSequences(Statement stmt) throws SQLException {
        // Create sequences first
        try {
            stmt.execute("CREATE SEQUENCE users_seq START WITH 1 INCREMENT BY 1");
            System.out.println("Users sequence created");
        } catch (SQLException e) {
            if (!e.getMessage().contains("name is already used")) {
                System.out.println("Users sequence might already exist: " + e.getMessage());
            }
        }

        try {
            stmt.execute("CREATE SEQUENCE game_history_seq START WITH 1 INCREMENT BY 1");
            System.out.println("Game history sequence created");
        } catch (SQLException e) {
            if (!e.getMessage().contains("name is already used")) {
                System.out.println("Game history sequence might already exist: " + e.getMessage());
            }
        }

        // Create tables without IDENTITY columns
        try {
            String createUsersTable = """
            CREATE TABLE users (
                id NUMBER PRIMARY KEY,
                username VARCHAR2(50) UNIQUE NOT NULL,
                password VARCHAR2(100) NOT NULL,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """;
            stmt.execute(createUsersTable);
            System.out.println("Users table created");
        } catch (SQLException e) {
            if (!e.getMessage().contains("name is already used")) {
                throw e;
            }
        }

        try {
            String createHistoryTable = """
            CREATE TABLE game_history (
                id NUMBER PRIMARY KEY,
                username VARCHAR2(50) NOT NULL,
                difficulty VARCHAR2(10) NOT NULL,
                result VARCHAR2(10) NOT NULL,
                time_spent NUMBER NOT NULL,
                play_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (username) REFERENCES users(username)
            )
        """;
            stmt.execute(createHistoryTable);
            System.out.println("Game history table created");
        } catch (SQLException e) {
            if (!e.getMessage().contains("name is already used")) {
                throw e;
            }
        }

        // Create triggers for auto-increment
        try {
            String usersTrigger = """
            CREATE OR REPLACE TRIGGER users_trigger
            BEFORE INSERT ON users
            FOR EACH ROW
            BEGIN
                IF :NEW.id IS NULL THEN
                    :NEW.id := users_seq.NEXTVAL;
                END IF;
            END;
        """;
            stmt.execute(usersTrigger);
            System.out.println("Users trigger created");
        } catch (SQLException e) {
            System.out.println("Users trigger creation warning: " + e.getMessage());
        }

        try {
            String historyTrigger = """
            CREATE OR REPLACE TRIGGER game_history_trigger
            BEFORE INSERT ON game_history
            FOR EACH ROW
            BEGIN
                IF :NEW.id IS NULL THEN
                    :NEW.id := game_history_seq.NEXTVAL;
                END IF;
            END;
        """;
            stmt.execute(historyTrigger);
            System.out.println("Game history trigger created");
        } catch (SQLException e) {
            System.out.println("Game history trigger creation warning: " + e.getMessage());
        }
    }

    public boolean registerUser(String username, String password) {
        String sql = "INSERT INTO users (username, password) VALUES (?, ?)";
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, username);
            pstmt.setString(2, hashPassword(password));
            pstmt.executeUpdate();
            return true;

        } catch (SQLException e) {
            System.err.println("Registration error: " + e.getMessage());
            return false;
        }
    }

    public boolean authenticateUser(String username, String password) {
        String sql = "SELECT password FROM users WHERE username = ?";
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, username);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                String storedPassword = rs.getString("password");
                return verifyPassword(password, storedPassword);
            }
            return false;

        } catch (SQLException e) {
            System.err.println("Authentication error: " + e.getMessage());
            return false;
        }
    }

    public void saveGameResult(String username, String difficulty, String result, int timeSpent) {
        String sql = "INSERT INTO game_history (username, difficulty, result, time_spent) VALUES (?, ?, ?, ?)";
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, username);
            pstmt.setString(2, difficulty);
            pstmt.setString(3, result);
            pstmt.setInt(4, timeSpent);
            pstmt.executeUpdate();

        } catch (SQLException e) {
            System.err.println("Save game result error: " + e.getMessage());
        }
    }

    public List<GameRecord> getPlayerHistory(String username) {
        List<GameRecord> history = new ArrayList<>();
        String sql = "SELECT difficulty, result, time_spent, play_time FROM game_history WHERE username = ? ORDER BY play_time DESC";

        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, username);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                GameRecord record = new GameRecord();
                record.difficulty = rs.getString("difficulty");
                record.result = rs.getString("result");
                record.timeSpent = rs.getInt("time_spent");
                record.playTime = rs.getTimestamp("play_time").toLocalDateTime()
                        .format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                history.add(record);
            }

        } catch (SQLException e) {
            System.err.println("Get player history error: " + e.getMessage());
        }

        return history;
    }

    private String hashPassword(String password) {
        // Simple hash for demo - in production use proper hashing like BCrypt
        return Integer.toString(password.hashCode());
    }

    private boolean verifyPassword(String password, String hashedPassword) {
        return hashPassword(password).equals(hashedPassword);
    }
}